using System;
using CommandPattern.Classes;

namespace CommandPattern
{
    class Program
    {
        static void Main(string[] args)
        {
            //Можем наслаждаться
            Customer Andrew = new();
            Andrew.SetCommand(new OrderSoup());
            Andrew.ToOrder();

            Andrew.SetCommand(new OrderFries());
            Andrew.ToOrder();

            


            /*
             Паттерн комманда
             
             Для чего нужен данный паттерн : 
             1.Когда нам нужен один объект который должен выполнять много действий 
             2.Когда вы хотите разделить действия на объекты 
             3.Если необходимо поставить операции в очередь
             4.Если необходима операция отмены 


             Как реализовать данный паттерн : 
             1. Создайте интерфейс ICommand который будет иметь метод принятия и передачи данных 
             или другой логики от отправителя к получателю
             2. Создайте класс получателя в котором будет заключена вся бизнес логика и который будет одним 
             из звеньев цепи отправитель-команда-получатель 
             3. Создайте конкретные команды 
             4. Создайте класс отправителя, который будет содержать в себе ссылку на ICommand и логику
             вызова определенной команды

             
             
             Плюсы +
             +Разрывает связь между отправителем и получателем
             +Реализация принципа открытости/закрытости
             +Позволяет реализовать простую отмену и отмену операций 


             Минусы -
             -Усложняет структуру проекта дополнительными классами
             
             *Данный паттерн достаточно тесно связан с паттерном стратегия
             
             Вывод: Данный паттерн лучше использовать если необходимо :
             1. Разорвать связь между отправителем и получателем
             2. Перенести логику методов на класс 
             
             
             
             */
        }
    }
}
