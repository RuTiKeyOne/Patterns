using System;
using AbstractFactory.ConcreteFactories;

namespace AbstractFactory
{
    public enum TypesFurniture
    {
        Modern,
        Artdecor,
        Victorian
    }

    class Program
    {
        static void Main(string[] args)
        {
            Customer Andrew = new(); //Создадим объект покупателя

            Andrew.OrderFurniture(new ModernFactory()); //Сделаем заказ указываю какие объекты мы хотим получить

            Console.WriteLine("------\n");

            Andrew.OrderFurniture(new VictorianFactory()); //Сделаем заказ указываю какие объекты мы хотим получить

            Console.WriteLine("------\n");

            Andrew.OrderFurniture(new ArtdecorFactory()); //Сделаем заказ указываю какие объекты мы хотим получить
        }


        /*
         Паттерн абстрактная фабрика
         
         Паттерн позволяет создавать семейства связанных объектов не привязываясь к конкретным классам объектов 

         Зачем нужен данный паттерн:
         1.Если логика должна работать с разными видами взаимосвязанных объектов
         2.Когда в программе уже используется Фабричный метод, но очередные изменения предполагают 
           введение новых типов продуктов.


         То есть данный паттерн нужен если метод(или другая бизнес логика) будет работать с разными видами взаимосвязанных
         объектов 
         
         для этого просто создадим конкретную фабрику и конкретные виды объектов и будем создавать их через фабрики

         Например как в данном примере : 
         
         Если клиент хочет заказать он указывает конкретную фаблику(артдекор/современную/викторианскую) и получает конкретные
         объекты    

         
         Как реализовать данный паттерн:
         1.Создадим интерфейсы объектов(в нашем случае это стул, стол и диван (IAbstractChair, IAbstractTable, IAbstractSofe))
         2.Создадим интерфейс фабрики IAbstractFactory где будем создавать объекты
         3.Создадим конктретные классы объектов (Современый стул, стол, диван) (Викторианский стул, стол, диван) (Артдекор стул, стол, диван)
         4.Создадим конкретные фабрики, которые будут создавать конкретные объекты (Современная фабрика, Аркдекор фабрика, Викторианская фабрика)
         5.Создадим метод в бизнес логике который будет принимать абстрастную фабрику для быстрой подмены конкретной фабрики и создадим объекты
         
         
         Плюсы:
         +Гарантирует что продукты будут сочетаться 
         +Избавляет от привязки к конкретным объектам
         +Выделяет код создания объектов
         +Упрощает добавление новых видов продуктов
         +Реализует принцип открытости/закрытости

         Минусы:
         -Усложняет архитектуру программы
         -Требует наличие продуктов каждой вариации
         

         Вывод : Использовать если бизнес логика требует возможность работы с разными видами сочетаемых объектов
         и быстрого добавления новых видов
         
         
         */
    }
}
