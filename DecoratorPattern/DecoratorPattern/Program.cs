using System;
using DecoratorPattern.Components;

namespace DecoratorPattern
{
    class Program
    {
        static void Main(string[] args)
        {
            Client Andrew = new(); //Создаем класс бизнес логики

            string FirstResult = Andrew.Notify(new SlackDecorator(new Facebook()), "Произошло событые"); //Получаем строку 
            string SecondResult = Andrew.Notify(new FacebookDecorator(new Slack()), "Произошло новое событие"); //Получаем строку

            Console.WriteLine($"Fist result: {FirstResult}, Second result: {SecondResult}"); //Выводим результаты
        }

        /*
         Паттетн декоратор
         
         Паттерн декоратор используется для добавление какой-то логику объекту создавая классы-обертки не 
         задействуя наследование.

         Когда использовать данный паттерн:

         1.Если необходимо добавить какую-то логику объекту на лету, не изменяя код, который использует бизнес логика.
         2.Если нельзя расширить логику наследованием.
         
         Шаги реализации:

         1.Подумайте, о том нужно ли расширять локигу объекта.
         2.Решите, возможно ли использовать наследование.
         3.Если использовать наследование невозможно, то используем паттерн.
         4.Проверьте есть ли родительский и несколько дочерних классов.
         5.Создайте абстрактный декоратор, который будет ссылаться на родительский класс компонента и 
         использовать либо агрегацию либо композицию.
         6.Опишите методы для основного копонента, методы для дополнений.
         7.Создайте конкретный декоратор, который бы наследовался он абстрактного.
         8.Реализуйте методы в конкретном декораторе как вам необходимо и вызывайте метод обернутого объекта.
         9.Клиенский код будет отвечать за выбор и обертку декоратора и конкретного компонента.
         
         Плюсы:

         +Добавляет гибкость, мы можем создать класс обертки на лету и добавить к нему какую-то функциональность
         +Не статичен в отличии от наследования
         +Можно избежать создания божественного объекта методом создания нескольких но мелких оберток 
         которые решают конкретную проблему
         Минусы:

         -При неправильном использовании может сильно усложнить архитектуру проекта
         
        Вывод: Использовать если 
         1. Есть конкретная архитектура родитель-потомок 
         2. Если не можем использовать насоедование по причине его недостатков 
         3. Если необходимо добавлять объекты с разной логикой на лету (просто создаем новую обертку и 
         реализуем какую-то логику)
         */
    }
}
