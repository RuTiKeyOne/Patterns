using AdapterPattern.Classes;
using AdapterPattern.Classes.Adaptee;
using System;

namespace AdapterPattern
{
    class Program
    {
        static void Main(string[] args)
        {
            Adapter Adapter = new(new TypeC()); //Создаем адаптер и передаем объект который необходимо адаптировать
            Console.WriteLine(Adapter.UseOutlet()); //Используем логику сервиса

            Adapter = new(new TypeA());//Создаем адаптер и передаем объект который необходимо адаптировать
            Console.WriteLine(Adapter.UseOutlet());//Используем логику сервиса

            Adapter = new(new TypeI());//Создаем адаптер и передаем объект который необходимо адаптировать
            Console.WriteLine(Adapter.UseOutlet());//Используем логику сервиса
        }

        /*
         Паттерн Адаптер
         
         Паттер адаптер позволяет объектам с несовместимыми интерфейсами работать вместе. 

         Когда использовать паттерн адаптер:
         1.Если необходимо использовать сторонний класс, но его интерфейс не соответствует остальному коду приложения.
         2.Когда вам нужно использовать несколько существующих подклассов, но в них не хватает какой-то общей 
         функциональности, причём расширить суперкласс вы не можете.

         Шаги реализации:
         1.Убедитись в том что, есть два класса с несовместимыми интерфейсами.
         2.Создать интерфейс, через которое приложение могло работать с сервисом.
         3.Создать класс адаптера и реализовать интерфейс.
         4.Добавим в адаптер ссылку на объект сервиса.
         5.Реализуем все методы клиенского интерфейса в адаптере.
         6.Приложение должно использовать адаптер только через клиенский интерфейс, это позволить добавлять 
         адаптеры в будущем.

         Плюсы:
         +Отделяет и скрывает от клиента подробности преобразования различных интерфейсов.

         Минусы:
         -Усложняет архитектуру приложения.

         Вывод: Использовать если необходимо реализовать работу двух объектов с несовместимыми интерфейсами. 
         */
    }
}
