using MediatorPattern.Classes;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MediatorPattern
{
    class Program
    {
        static void Main(string[] args)
        {
            //Создаём конкретные объекты и вызываем необходимые методы
            AirFighter F16 = new AirFighter();
            Bomber B52 = new Bomber();
            HeliCopter AH64 = new HeliCopter();
            //В Program(начале программы) создаём класс ConcereMediator и инициализируем объекты внутри него
            ConcreteMediator CM = new ConcreteMediator(F16, AH64, B52);


            //Ожидаем реакцию других классов на действие
            F16.TakeOff();


            //Ожидаем реакцию других классов на действие
            B52.TakeOff();


            //Ожидаем реакцию других классов на действие
            AH64.TakeOff();
        }

        /*
         Паттерн Посредник

         Цель паттерна:
         1.Паттерн посредник необходим для взаимодействия слабосвязанных классов между собой,
         2.Когда есть много классов с сильной связью и это необходимо исправить

         Что необходимо для реализации данного паттерна:
         1)Необходимо создать интерфейс IMediator и метод(Notify) в котором будет происходить взаимодействие(методов может быть несколько)
         2)Создаём абстрактный класс который будет общим для всех классов, он нужен для того чтобы инициализировать
         IMediator и вызвать Notify то есть мы фактичестки делаем так IMediator Mediator = new ConcreteMediator(); 
         Mediator.Notify(this,сообщение);
         3)Создаём конкретные классы которые реализуют какую-нибудь логику и наследуем её от AirCraft(абстрактного класса)
         4)В методах конкретного класса мы вызываем Notify и уведомляем о действии
         5)Создаём класс ConcreteMediator и реализуем Notify
         6)В этом же классе в конструкторе инициализируем объекты которые как-то будут реагировать
         и инициализируем IMediator Mediator = new ConcereMediator(); чтобы не получить исключение
         7)В Notify реализуем конкретную логику реагирования классов в зависимости от получаемых значений
         8)Создаём конкретные объекты и вызываем необходимые методы
         9)В Program(начале программы) создаём класс ConcereMediator и инициализируем объекты внутри него
         10)Ожидаем реакцию других классов на действие
         
         Плюсы 
         + Устраняет зависимости между компонентами, позволяя повторно их использовать.
         + Упрощает взаимодействие между компонентами.
         + Централизует управление в одном месте.

         Минусы
         - Посредник может сильно раздуться и усложнить архитектуру.

         */
    }
}
