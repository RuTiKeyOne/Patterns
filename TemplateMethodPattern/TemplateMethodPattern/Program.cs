using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TemplateMethodPattern.Classes;

namespace TemplateMethodPattern
{
    class Program
    {
        static void Main(string[] args)
        {
            //Создаем объект Client и передаем в передаем конкретный класс
            Human Andrew = new Human();
            //Наслаждаемся
            Andrew.SomeWork(new Cat());
            Console.WriteLine("-----");
            //Создаем объект Client и передаем в передаем конкретный класс
            //Наслаждаемся
            Andrew.SomeWork(new Tiger());
        }

        /*
         Шаблонный метод

         Необходим когда есть четкая структура, 
         есть классы которые реализуют почти одинаковую логику с небольшими отличиями

         Для этого мы:

         1) Создаём абстрактный класс с шаблонным методом
         2) Создаем основную логику в методах
         3) Создаем методы которые необходимо переопределить
         4) Вызываем методы в шаблонном методе
         5) Наследуем абстраткный класс и реализуем к конкретном классе
         6) Создаем класс (Client) в котором принимаем абстрактный класс и вызываем шаблонный метод
         7) Создаем объект Client и передаем в передаем конкретный класс
         8) Наслаждаемся


         Плюсы:
         +Облегчает повторное использование кода
         +Создает четкую структуру

         Минусы
         -Жесткое ограничение скелетом(методами определенными в абстрактном классе)
         -Можно нарушить принцип Лисков
         -При большом количестве шагов сложно поддерживать

          Вывод:
          Использовать только при почти идентичной реализации нескольких классов



 */
    }
}
