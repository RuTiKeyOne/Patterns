using StatePattern.Classes;
using System;

namespace StatePattern
{
    class Program
    {
        static void Main(string[] args)
        {
            Phone Iphone5 = new(new UnlockWindow());
            Iphone5.PressButton();

            Iphone5.TransitionTo(new OpenSettings());
            Iphone5.PressButton();

            Iphone5.TransitionTo(new ShowСharger());
            Iphone5.PressButton();
        }

        /*
         Паттерн состояние

         Для чего нужен данный паттерн : 
         1.Когда в классе есть метод который меняет свою логику в зависимости от состояния объекта
         2.Когда необходимо избавить от большого количества if or switch case в методе 
         3.Когда необходимо убрать дублирование кода 

         Как реализовать данный паттерн : 
         1. Необходимо создать абстрактный класс в котором :
               *Необходимо ссылаться на объект который будет менять своё состояние 
               *Создать метод который будет устанавливать ссылку на объект(Конструктор не подойдет)
               *Создать метод который нужно будет перепределять в конкретных состояниях
               
         2.Создадь конкретные классы которые по-своему будут реализовывать логику состояния
         3.Создать объект который будет менять свое поведение в зависимости от состояния :
               *Он хранит в себе ссылку на состояние 
               *Имеет метод для инициализации состояния (State State)
               *Конкретный метод который будет менять свою логику взависимости от состояния объекта 
         
         
         Для себя будущего и того кто будет читать данные
         комментарии объясню почему вот тут нельзя использовать конструктор
         
         public void TransitionTo(State state) //Имеет метод для инициализации состояния (State State)
         {
            Console.WriteLine($"Установить новое состояни, type class : {state.GetType().Name}\n");
            this.State = state;
            this.State.SetPhone(this);
         }
         
         Все просто, данный паттерн очень похож на паттерн стратегия, но в отличии от стратегии состояния и сам класс
         контекста(Phone) знают друг о друге и могут меня поведение на лету например так :
         
         this.Phone.TransitionTo(new UnlockWindow());
         
         То есть имея поле в состоянии мы можем из состояния поменять одно состояние на другое на лету(так же из вне)

         Плюсы +
         +Избавляет от большого количества if or switch
         +Упрощает класс контекста(Phone)
         +Решает проблему частой смены состояния 

         Минусы -
         -Может быть неоправдано использован если состояния меняются редко
         


         Вывод : Использовать если у контекста часто меняются состояния(нафиг множественное использование if or switch)
        и необходимо менять логику на лету 
         
         */
    }
}
